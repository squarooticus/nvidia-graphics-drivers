From 9a3b019ce1b05b0ee1c6feb2a85ee5f2684d41a3 Mon Sep 17 00:00:00 2001
From: Andreas Beckmann <anbe@debian.org>
Date: Sun, 6 Aug 2023 17:18:58 +0200
Subject: [PATCH] backport get_user_pages changes from 525.53

---
 common/inc/nv-mm.h            | 113 +++++++++++++++-------------------
 nvidia-drm/nvidia-drm-linux.c |   4 +-
 nvidia/os-mlock.c             |   3 +-
 3 files changed, 50 insertions(+), 70 deletions(-)

diff --git a/common/inc/nv-mm.h b/common/inc/nv-mm.h
index c008d46..43b6aa0 100644
--- a/common/inc/nv-mm.h
+++ b/common/inc/nv-mm.h
@@ -29,6 +29,8 @@
 typedef int vm_fault_t;
 #endif
 
+#include <linux/mm.h>
+#include <linux/sched.h>
 /* get_user_pages
  *
  * The 8-argument version of get_user_pages was deprecated by commit 
@@ -47,38 +49,30 @@ typedef int vm_fault_t;
  *
  */
 
-#if defined(NV_GET_USER_PAGES_HAS_ARGS_WRITE_FORCE)
+#if defined(NV_GET_USER_PAGES_HAS_ARGS_FLAGS)
     #define NV_GET_USER_PAGES get_user_pages
-#elif defined(NV_GET_USER_PAGES_HAS_ARGS_TSK_WRITE_FORCE)
-    #define NV_GET_USER_PAGES(start, nr_pages, write, force, pages, vmas) \
-        get_user_pages(current, current->mm, start, nr_pages, write, force, pages, vmas)
+#elif defined(NV_GET_USER_PAGES_HAS_ARGS_TSK_FLAGS)
+    #define NV_GET_USER_PAGES(start, nr_pages, flags, pages, vmas) \
+        get_user_pages(current, current->mm, start, nr_pages, flags, pages, vmas)
 #else
-    #include <linux/mm.h>
-    #include <linux/sched.h>
-
     static inline long NV_GET_USER_PAGES(unsigned long start,
                                          unsigned long nr_pages,
-                                         int write,
-                                         int force,
+                                         unsigned int flags,
                                          struct page **pages,
                                          struct vm_area_struct **vmas)
     {
-        unsigned int flags = 0;
-
-        if (write)
-            flags |= FOLL_WRITE;
-        if (force)
-            flags |= FOLL_FORCE;
+        int write = flags & FOLL_WRITE;
+        int force = flags & FOLL_FORCE;
 
-    #if defined(NV_GET_USER_PAGES_HAS_ARGS_TSK_FLAGS)
-        return get_user_pages(current, current->mm, start, nr_pages, flags,
-                              pages, vmas);
+    #if defined(NV_GET_USER_PAGES_HAS_ARGS_WRITE_FORCE)
+        return get_user_pages(start, nr_pages, write, force, pages, vmas);
     #else
-        // remaining defination(NV_GET_USER_PAGES_HAS_ARGS_FLAGS)
-        return get_user_pages(start, nr_pages, flags, pages, vmas);
-    #endif
+        // NV_GET_USER_PAGES_HAS_ARGS_TSK_WRITE_FORCE
+        return get_user_pages(current, current->mm, start, nr_pages, write,
+                              force, pages, vmas);
+    #endif // NV_GET_USER_PAGES_HAS_ARGS_WRITE_FORCE
     }
-#endif
+#endif // NV_GET_USER_PAGES_HAS_ARGS_FLAGS
 
 /*
  * get_user_pages_remote() was added by commit 1e9877902dc7
@@ -113,66 +107,55 @@ typedef int vm_fault_t;
  */
 
 #if defined(NV_GET_USER_PAGES_REMOTE_PRESENT)
-    #if defined(NV_GET_USER_PAGES_REMOTE_HAS_ARGS_TSK_WRITE_FORCE)
-        #define NV_GET_USER_PAGES_REMOTE    get_user_pages_remote
+    #if defined(NV_GET_USER_PAGES_REMOTE_HAS_ARGS_FLAGS_LOCKED)
+        #define NV_GET_USER_PAGES_REMOTE get_user_pages_remote
+
+    #elif defined(NV_GET_USER_PAGES_REMOTE_HAS_ARGS_TSK_FLAGS_LOCKED)
+        #define NV_GET_USER_PAGES_REMOTE(mm, start, nr_pages, flags, pages, vmas, locked) \
+            get_user_pages_remote(NULL, mm, start, nr_pages, flags, pages, vmas, locked)
+
+    #elif defined(NV_GET_USER_PAGES_REMOTE_HAS_ARGS_TSK_FLAGS)
+        #define NV_GET_USER_PAGES_REMOTE(mm, start, nr_pages, flags, pages, vmas, locked) \
+            get_user_pages_remote(NULL, mm, start, nr_pages, flags, pages, vmas)
+
     #else
-        static inline long NV_GET_USER_PAGES_REMOTE(struct task_struct *tsk,
-                                                    struct mm_struct *mm,
+        // NV_GET_USER_PAGES_REMOTE_HAS_ARGS_TSK_WRITE_FORCE
+        static inline long NV_GET_USER_PAGES_REMOTE(struct mm_struct *mm,
                                                     unsigned long start,
                                                     unsigned long nr_pages,
-                                                    int write,
-                                                    int force,
+                                                    unsigned int flags,
                                                     struct page **pages,
-                                                    struct vm_area_struct **vmas)
+                                                    struct vm_area_struct **vmas,
+                                                    int *locked)
         {
-            unsigned int flags = 0;
-
-            if (write)
-                flags |= FOLL_WRITE;
-            if (force)
-                flags |= FOLL_FORCE;
+            int write = flags & FOLL_WRITE;
+            int force = flags & FOLL_FORCE;
 
-        #if defined(NV_GET_USER_PAGES_REMOTE_HAS_ARGS_TSK_FLAGS)
-            return get_user_pages_remote(tsk, mm, start, nr_pages, flags,
+            return get_user_pages_remote(NULL, mm, start, nr_pages, write, force,
                                          pages, vmas);
-        #elif defined(NV_GET_USER_PAGES_REMOTE_HAS_ARGS_TSK_FLAGS_LOCKED)
-            return get_user_pages_remote(tsk, mm, start, nr_pages, flags,
-                                         pages, vmas, NULL);
-        #else
-            // remaining defined(NV_GET_USER_PAGES_REMOTE_HAS_ARGS_FLAGS_LOCKED)
-            return get_user_pages_remote(mm, start, nr_pages, flags,
-                                         pages, vmas, NULL);
-        #endif
         }
-    #endif
+    #endif // NV_GET_USER_PAGES_REMOTE_HAS_ARGS_FLAGS_LOCKED
 #else
     #if defined(NV_GET_USER_PAGES_HAS_ARGS_TSK_WRITE_FORCE)
-        #define NV_GET_USER_PAGES_REMOTE    get_user_pages
-    #else
-        #include <linux/mm.h>
-        #include <linux/sched.h>
-
-        static inline long NV_GET_USER_PAGES_REMOTE(struct task_struct *tsk,
-                                                    struct mm_struct *mm,
+        static inline long NV_GET_USER_PAGES_REMOTE(struct mm_struct *mm,
                                                     unsigned long start,
                                                     unsigned long nr_pages,
-                                                    int write,
-                                                    int force,
+                                                    unsigned int flags,
                                                     struct page **pages,
-                                                    struct vm_area_struct **vmas)
+                                                    struct vm_area_struct **vmas,
+                                                    int *locked)
         {
-            unsigned int flags = 0;
-
-            if (write)
-                flags |= FOLL_WRITE;
-            if (force)
-                flags |= FOLL_FORCE;
+            int write = flags & FOLL_WRITE;
+            int force = flags & FOLL_FORCE;
 
-            return get_user_pages(tsk, mm, start, nr_pages, flags, pages, vmas);
+            return get_user_pages(NULL, mm, start, nr_pages, write, force, pages, vmas);
         }
-    #endif
-#endif
 
+    #else
+        #define NV_GET_USER_PAGES_REMOTE(mm, start, nr_pages, flags, pages, vmas, locked) \
+            get_user_pages(NULL, mm, start, nr_pages, flags, pages, vmas)
+    #endif // NV_GET_USER_PAGES_HAS_ARGS_TSK_WRITE_FORCE
+#endif // NV_GET_USER_PAGES_REMOTE_PRESENT
 
 /*
  * The .virtual_address field was effectively renamed to .address, by these
diff --git a/nvidia-drm/nvidia-drm-linux.c b/nvidia-drm/nvidia-drm-linux.c
index a4c5aeb..0cbaebf 100644
--- a/nvidia-drm/nvidia-drm-linux.c
+++ b/nvidia-drm/nvidia-drm-linux.c
@@ -103,8 +103,6 @@ int nv_drm_lock_user_pages(unsigned long address,
 {
     struct mm_struct *mm = current->mm;
     struct page **user_pages;
-    const int write = 1;
-    const int force = 0;
     int pages_pinned;
 
     user_pages = nv_drm_calloc(pages_count, sizeof(*user_pages));
@@ -115,7 +113,7 @@ int nv_drm_lock_user_pages(unsigned long address,
 
     nv_mmap_read_lock(mm);
 
-    pages_pinned = NV_GET_USER_PAGES(address, pages_count, write, force,
+    pages_pinned = NV_GET_USER_PAGES(address, pages_count, FOLL_WRITE,
                                      user_pages, NULL);
     nv_mmap_read_unlock(mm);
 
diff --git a/nvidia/os-mlock.c b/nvidia/os-mlock.c
index f88daed..cbe8e83 100644
--- a/nvidia/os-mlock.c
+++ b/nvidia/os-mlock.c
@@ -107,7 +107,6 @@ NV_STATUS NV_API_CALL os_lock_user_pages(
     struct mm_struct *mm = current->mm;
     struct page **user_pages;
     NvU64 i, pinned;
-    NvBool write = 1, force = 0;
     int ret;
 
     if (!NV_MAY_SLEEP())
@@ -128,7 +127,7 @@ NV_STATUS NV_API_CALL os_lock_user_pages(
 
     nv_mmap_read_lock(mm);
     ret = NV_GET_USER_PAGES((unsigned long)address,
-                            page_count, write, force, user_pages, NULL);
+                            page_count, FOLL_WRITE, user_pages, NULL);
     nv_mmap_read_unlock(mm);
     pinned = ret;
 
-- 
2.20.1

