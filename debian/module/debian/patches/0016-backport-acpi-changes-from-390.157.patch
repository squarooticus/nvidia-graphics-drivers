From b9953c07f3c3ca3cc96c0b78ce6fd2cb184f3125 Mon Sep 17 00:00:00 2001
From: Andreas Beckmann <anbe@debian.org>
Date: Thu, 24 Nov 2022 13:58:37 +0100
Subject: [PATCH] backport acpi changes from 390.157

---
 nvidia/nv-acpi.c | 45 +++++++++++++++++----------------------------
 1 file changed, 17 insertions(+), 28 deletions(-)

diff --git a/nvidia/nv-acpi.c b/nvidia/nv-acpi.c
index 7bf464c..828c314 100644
--- a/nvidia/nv-acpi.c
+++ b/nvidia/nv-acpi.c
@@ -234,9 +234,9 @@ static int nv_acpi_add(struct acpi_device *device)
     union acpi_object control_argument_0 = { ACPI_TYPE_INTEGER };
     struct acpi_object_list control_argument_list = { 0, NULL };
     nvidia_stack_t *sp = NULL;
-    struct list_head *node, *next;
     nv_acpi_integer_t device_id = 0;
     int device_counter = 0;
+    acpi_handle handle = NULL;
 
     status = nv_kmem_cache_alloc_stack(&sp);
     if (status != 0)
@@ -263,13 +263,12 @@ static int nv_acpi_add(struct acpi_device *device)
 
     // grab handles to all the important nodes representing devices
 
-    list_for_each_safe(node, next, &device->children) 
+    do
     {
-        struct acpi_device *dev =
-            list_entry(node, struct acpi_device, node);
-
-        if (!dev)
-            continue;
+        status = acpi_get_next_object(ACPI_TYPE_DEVICE, device->handle,
+                                      handle, &handle);
+        if (ACPI_FAILURE(status) || (handle == NULL))
+            break;
 
         if (device_counter == NV_MAXNUM_DISPLAY_DEVICES)
         {
@@ -280,7 +279,7 @@ static int nv_acpi_add(struct acpi_device *device)
         }
 
         status =
-            acpi_evaluate_integer(dev->handle, "_ADR", NULL, &device_id);
+            acpi_evaluate_integer(handle, "_ADR", NULL, &device_id);
         if (ACPI_FAILURE(status))
             /* Couldnt query device_id for this device */
             continue;
@@ -299,11 +298,11 @@ static int nv_acpi_add(struct acpi_device *device)
         }
 
         pNvAcpiObject->pNvVideo[device_counter].dev_id = device_id;
-        pNvAcpiObject->pNvVideo[device_counter].dev_handle = dev->handle;
+        pNvAcpiObject->pNvVideo[device_counter].dev_handle = handle;
     
         device_counter++;
 
-    }
+    } while (handle != NULL);
 
     // arg 0, bits 1:0, 0 = enable events
     control_argument_0.integer.type = ACPI_TYPE_INTEGER;
@@ -1310,16 +1309,15 @@ NV_STATUS NV_API_CALL nv_acpi_ddc_method(
 )
 {
     acpi_status status;
-    struct acpi_device *device = NULL;
     struct acpi_buffer output = { ACPI_ALLOCATE_BUFFER, NULL };
     union acpi_object *ddc;
     union acpi_object ddc_arg0 = { ACPI_TYPE_INTEGER };
     struct acpi_object_list input = { 1, &ddc_arg0 };
-    struct list_head *node, *next;
     nv_acpi_integer_t device_id = 0;
     NvU32 i;
     acpi_handle dev_handle  = NULL;
     acpi_handle lcd_dev_handle  = NULL;
+    acpi_handle handle = NULL;
 
     if (!nv_acpi_get_device_handle(nv, &dev_handle))
         return NV_ERR_NOT_SUPPORTED;
@@ -1327,15 +1325,6 @@ NV_STATUS NV_API_CALL nv_acpi_ddc_method(
     if (!dev_handle)
         return NV_ERR_INVALID_ARGUMENT;
 
-#if defined(NV_ACPI_BUS_GET_DEVICE_PRESENT)
-    status = acpi_bus_get_device(dev_handle, &device);
-#else
-    return NV_ERR_NOT_SUPPORTED;
-#endif
-
-    if (ACPI_FAILURE(status) || !device)
-        return NV_ERR_INVALID_ARGUMENT;
-
     if (!NV_MAY_SLEEP())
     {
 #if defined(DEBUG)
@@ -1346,15 +1335,15 @@ NV_STATUS NV_API_CALL nv_acpi_ddc_method(
         return NV_ERR_NOT_SUPPORTED;
     }
 
-    list_for_each_safe(node, next, &device->children) 
+    while (lcd_dev_handle == NULL)
     {
-        struct acpi_device *dev =
-            list_entry(node, struct acpi_device, node);
 
-        if (!dev)
-            continue;
+        status = acpi_get_next_object(ACPI_TYPE_DEVICE, dev_handle,
+                                      handle, &handle);
+        if (ACPI_FAILURE(status) || (handle == NULL))
+            break;
 
-        status = acpi_evaluate_integer(dev->handle, "_ADR", NULL, &device_id);
+        status = acpi_evaluate_integer(handle, "_ADR", NULL, &device_id);
         if (ACPI_FAILURE(status))
             /* Couldnt query device_id for this device */
             continue;
@@ -1363,7 +1352,7 @@ NV_STATUS NV_API_CALL nv_acpi_ddc_method(
 
         if ((device_id == 0x0110) || (device_id == 0x0118) || (device_id == 0x0400)) /* Only for an LCD*/
         {
-            lcd_dev_handle = dev->handle;
+            lcd_dev_handle = handle;
             nv_printf(NV_DBG_INFO, "NVRM: %s Found LCD: %x\n", __FUNCTION__, device_id);
             break;
         }
-- 
2.20.1

