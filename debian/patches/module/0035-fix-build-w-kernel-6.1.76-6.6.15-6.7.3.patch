From 3cc110fc5dd5884a997d35c9cdf9940373998cb5 Mon Sep 17 00:00:00 2001
From: Ionen Wolkens <ionen@gentoo.org>
Date: Thu, 1 Feb 2024 14:58:45 -0500
Subject: [PATCH] fix build w/ kernel 6.1.76+6.6.15+6.7.3

linux-6.1.76, 6.6.15, and 6.7.3 have modified the non-ARCH-specific
pfn_valid() to use __rcu_read_lock/unlock[1] that is marked GPL and
cannot be used here[2][3][4] unless use the open source variant.

As a workaround, reuse the old implementation until NVIDIA makes
a fixed release (due to no longer be using pfn_valid[5], likely
with its own implementation similarly to this patch).

Safe to use with kernel >=5.15 or so but older ones had a different
pfn_valid implementation. However 5.15 and older branches are
"currently" not affected, so simply limit to >=6.1.76.

[1] https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/commit/include/linux/mmzone.h?h=v6.7.3&id=3a01daace71b521563c38bbbf874e14c3e58adb7
[2] https://bugs.gentoo.org/923456
[3] https://forums.developer.nvidia.com/t/280908
[4] https://github.com/NVIDIA/open-gpu-kernel-modules/issues/594
[5] https://github.com/NVIDIA/open-gpu-kernel-modules/issues/594#issuecomment-1916197641

Bug-Debian: https://bugs.debian.org/1062932
Origin: gentoo, https://github.com/gentoo/gentoo/blob/c64caf53/x11-drivers/nvidia-drivers/files/nvidia-drivers-470.223.02-gpl-pfn_valid.patch
---
 common/inc/nv-linux.h | 21 +++++++++++++++++++++
 nvidia/nv-mmap.c      |  2 +-
 nvidia/os-mlock.c     |  4 ++--
 3 files changed, 24 insertions(+), 3 deletions(-)

diff --git a/common/inc/nv-linux.h b/common/inc/nv-linux.h
index 9f32e4e..ad40a8c 100644
--- a/common/inc/nv-linux.h
+++ b/common/inc/nv-linux.h
@@ -1998,4 +1998,25 @@ typedef enum
 #include <linux/clk-provider.h>
 #endif
 
+#if defined(CONFIG_HAVE_ARCH_PFN_VALID) || LINUX_VERSION_CODE < KERNEL_VERSION(6,1,76)
+#  define nv_pfn_valid pfn_valid
+#else
+/* pre-6.1.76 kernel pfn_valid version without GPL rcu_read_lock/unlock() */
+static inline int nv_pfn_valid(unsigned long pfn)
+{
+        struct mem_section *ms;
+
+        if (PHYS_PFN(PFN_PHYS(pfn)) != pfn)
+                return 0;
+
+        if (pfn_to_section_nr(pfn) >= NR_MEM_SECTIONS)
+                return 0;
+
+        ms = __pfn_to_section(pfn);
+        if (!valid_section(ms))
+                return 0;
+
+        return early_section(ms) || pfn_section_valid(ms, pfn);
+}
+#endif
 #endif  /* _NV_LINUX_H_ */
diff --git a/nvidia/nv-mmap.c b/nvidia/nv-mmap.c
index da01e46..bda2661 100644
--- a/nvidia/nv-mmap.c
+++ b/nvidia/nv-mmap.c
@@ -575,7 +575,7 @@ int nvidia_mmap_helper(
             //
             if ((nv_get_numa_status(nvl) == NV_NUMA_STATUS_ONLINE) &&
                 !IS_REG_OFFSET(nv, access_start, access_len) &&
-                (pfn_valid(PFN_DOWN(mmap_start))))
+                (nv_pfn_valid(PFN_DOWN(mmap_start))))
             {
                 ret = nvidia_mmap_numa(vma, mmap_context);
                 if (ret)
diff --git a/nvidia/os-mlock.c b/nvidia/os-mlock.c
index e378245..0f0a93b 100644
--- a/nvidia/os-mlock.c
+++ b/nvidia/os-mlock.c
@@ -113,7 +113,7 @@ static NV_STATUS get_io_pages(struct vm_area_struct *vma,
     for (i = 0; i < page_count; i++)
     {
         if ((nv_follow_pfn(vma, (start + (i * PAGE_SIZE)), &pfn) < 0) ||
-            (!pfn_valid(pfn)))
+            (!nv_pfn_valid(pfn)))
         {
             rmStatus = NV_ERR_INVALID_ADDRESS;
             break;
@@ -187,7 +187,7 @@ NV_STATUS NV_API_CALL os_lookup_user_io_memory(
         goto done;
     }
 
-    if (pfn_valid(pfn))
+    if (nv_pfn_valid(pfn))
     {
         rmStatus = get_io_pages(vma, start, page_count, (struct page **)result_array);
         if (rmStatus == NV_OK)
-- 
2.20.1

