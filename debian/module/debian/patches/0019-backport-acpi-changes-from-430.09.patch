From e3d7ec5ada0212df41cca825320477d227d2c6ad Mon Sep 17 00:00:00 2001
From: Andreas Beckmann <anbe@debian.org>
Date: Wed, 19 Oct 2022 18:08:31 +0200
Subject: [PATCH] backport acpi changes from 430.09

---
 nvidia/nv-acpi.c | 50 ++++--------------------------------------------
 1 file changed, 4 insertions(+), 46 deletions(-)

diff --git a/nvidia/nv-acpi.c b/nvidia/nv-acpi.c
index 8cf4b4f..5ec07a6 100644
--- a/nvidia/nv-acpi.c
+++ b/nvidia/nv-acpi.c
@@ -38,11 +38,6 @@ static NV_STATUS   nv_acpi_wmmx_method     (NvU32, NvU8 *, NvU16 *);
 static NV_STATUS   nv_acpi_mxmi_method     (NvU8 *, NvU16 *);
 static NV_STATUS   nv_acpi_mxms_method     (NvU8 *, NvU16 *);
 
-#if defined(NV_ACPI_DEVICE_OPS_HAS_MATCH)
-static int         nv_acpi_match           (struct acpi_device *, struct acpi_driver *);
-#endif
-
-#if defined(ACPI_VIDEO_HID) && defined(NV_ACPI_DEVICE_ID_HAS_DRIVER_DATA) 
 static const struct acpi_device_id nv_video_device_ids[] = {
     { 
         .id          = ACPI_VIDEO_HID, 
@@ -53,7 +48,6 @@ static const struct acpi_device_id nv_video_device_ids[] = {
         .driver_data = 0, 
     },
 };
-#endif
 
 static struct acpi_driver *nv_acpi_driver;
 static acpi_handle nvif_handle = NULL;
@@ -71,22 +65,13 @@ static nv_acpi_t  *psr_nv_acpi_object = NULL;
 static const struct acpi_driver nv_acpi_driver_template = {
     .name = "NVIDIA ACPI Video Driver",
     .class = "video",
-#if defined(ACPI_VIDEO_HID)
-#if defined(NV_ACPI_DEVICE_ID_HAS_DRIVER_DATA)
     .ids = nv_video_device_ids,
-#else
-    .ids = ACPI_VIDEO_HID,
-#endif
-#endif
     .ops = {
         .add = nv_acpi_add,
 #if !defined(NV_ACPI_DEVICE_OPS_REMOVE_ARGUMENT_COUNT) || (NV_ACPI_DEVICE_OPS_REMOVE_ARGUMENT_COUNT == 2)
         .remove = nv_acpi_remove_two_args,
 #else
         .remove = nv_acpi_remove_one_arg,
-#endif
-#if defined(NV_ACPI_DEVICE_OPS_HAS_MATCH)
-        .match = nv_acpi_match,
 #endif
     },
 };
@@ -235,7 +220,7 @@ static int nv_acpi_add(struct acpi_device *device)
     struct acpi_object_list control_argument_list = { 0, NULL };
     nvidia_stack_t *sp = NULL;
     struct list_head *node, *next;
-    nv_acpi_integer_t device_id = 0;
+    unsigned long long device_id = 0;
     int device_counter = 0;
 
     status = nv_kmem_cache_alloc_stack(&sp);
@@ -415,7 +400,7 @@ static void nv_acpi_event(acpi_handle handle, u32 event_type, void *data)
      */
     nv_acpi_t *pNvAcpiObject = data;
     u32 event_val = 0;
-    nv_acpi_integer_t state;
+    unsigned long long state;
     int status = 0;
     int device_counter = 0;
 
@@ -502,7 +487,7 @@ static void nv_acpi_powersource_hotplug_event(acpi_handle handle, u32 event_type
      */
     nv_acpi_t *pNvAcpiObject = data;
     u32 ac_plugged = 0;
-    nv_acpi_integer_t val;
+    unsigned long long val;
     int status = 0;
 
     if (event_type == ACPI_POWER_SOURCE_CHANGE_EVENT)
@@ -528,33 +513,6 @@ static void nv_acpi_powersource_hotplug_event(acpi_handle handle, u32 event_type
  * End of ACPI event handler functions
  */
 
-#if defined(NV_ACPI_DEVICE_OPS_HAS_MATCH)
-static int nv_acpi_match(struct acpi_device *device, struct acpi_driver *driver)
-{
-    acpi_handle DOS_method_handler, DOD_method_handler;
-
-    /*
-     *
-     * attempt to get handles to all of these objects
-     * _DOS = enable/disable output switching method
-     * _DOD = enumerate all devices attached to the display driver
-     * 
-     * If handles are available, this is the VGA object.
-     *
-     */
-
-    if ((!acpi_get_handle(device->handle, "_DOS", &DOS_method_handler)) &&
-        (!acpi_get_handle(device->handle, "_DOD", &DOD_method_handler)))
-    {
-        nv_printf(NV_DBG_INFO, "NVRM: nv_acpi_match: VGA ACPI device detected.\n");
-
-        return 0;
-    }
-    else
-        return (-ENODEV);
-}
-#endif
-
 /* Do the necessary allocations and install notifier "handler" on the device-node "device" */
 static nv_acpi_t* nv_install_notifier(struct acpi_handle *handle, acpi_notify_handler handler)
 {
@@ -1307,7 +1265,7 @@ NV_STATUS NV_API_CALL nv_acpi_ddc_method(
     union acpi_object ddc_arg0 = { ACPI_TYPE_INTEGER };
     struct acpi_object_list input = { 1, &ddc_arg0 };
     struct list_head *node, *next;
-    nv_acpi_integer_t device_id = 0;
+    unsigned long long device_id = 0;
     NvU32 i;
     acpi_handle dev_handle  = NULL;
     acpi_handle lcd_dev_handle  = NULL;
-- 
2.20.1

