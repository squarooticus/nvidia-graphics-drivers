From c52f5a20a566dc2eecc6f701f18872906db5db25 Mon Sep 17 00:00:00 2001
From: Andreas Beckmann <anbe@debian.org>
Date: Sat, 6 Aug 2022 11:14:05 +0200
Subject: [PATCH] backport nv_install_notifier changes from 470.141.03

---
 common/inc/nv-linux.h |  1 +
 nvidia/nv-acpi.c      | 29 ++++++++++-------------------
 2 files changed, 11 insertions(+), 19 deletions(-)

diff --git a/common/inc/nv-linux.h b/common/inc/nv-linux.h
index 0b5b0db..cbda4e2 100644
--- a/common/inc/nv-linux.h
+++ b/common/inc/nv-linux.h
@@ -1698,6 +1698,7 @@ typedef struct
 {
     nvidia_stack_t *sp;
     struct acpi_device *device;
+    struct acpi_handle *handle;
 
     nv_video_t pNvVideo[NV_MAXNUM_DISPLAY_DEVICES];
 
diff --git a/nvidia/nv-acpi.c b/nvidia/nv-acpi.c
index 7bf464c..8cf4b4f 100644
--- a/nvidia/nv-acpi.c
+++ b/nvidia/nv-acpi.c
@@ -556,14 +556,14 @@ static int nv_acpi_match(struct acpi_device *device, struct acpi_driver *driver)
 #endif
 
 /* Do the necessary allocations and install notifier "handler" on the device-node "device" */
-static nv_acpi_t* nv_install_notifier(struct acpi_device *device, acpi_notify_handler handler)
+static nv_acpi_t* nv_install_notifier(struct acpi_handle *handle, acpi_notify_handler handler)
 {
     nvidia_stack_t *sp = NULL;
     nv_acpi_t *pNvAcpiObject = NULL;
     NV_STATUS rmStatus = NV_ERR_GENERIC;
     acpi_status status = -1;
 
-    if (!device)
+    if (!handle)
         return NULL;
 
     if (nv_kmem_cache_alloc_stack(&sp) != 0)
@@ -577,11 +577,11 @@ static nv_acpi_t* nv_install_notifier(struct acpi_device *device, acpi_notify_ha
 
     os_mem_set((void *)pNvAcpiObject, 0, sizeof(nv_acpi_t));
 
-    // store a device reference in our object
-    pNvAcpiObject->device = device;
+    // store a handle reference in our object
+    pNvAcpiObject->handle = handle;
     pNvAcpiObject->sp = sp;
 
-    status = acpi_install_notify_handler(device->handle, ACPI_DEVICE_NOTIFY,
+    status = acpi_install_notify_handler(handle, ACPI_DEVICE_NOTIFY,
               handler, pNvAcpiObject);
     if (!ACPI_FAILURE(status)) 
     {
@@ -605,7 +605,7 @@ static void nv_uninstall_notifier(nv_acpi_t *pNvAcpiObject, acpi_notify_handler
 
     if (pNvAcpiObject && pNvAcpiObject->notify_handler_installed)
     {
-        status = acpi_remove_notify_handler(pNvAcpiObject->device->handle, ACPI_DEVICE_NOTIFY, handler);
+        status = acpi_remove_notify_handler(pNvAcpiObject->handle, ACPI_DEVICE_NOTIFY, handler);
         if (ACPI_FAILURE(status))
         {
             nv_printf(NV_DBG_INFO,
@@ -634,20 +634,18 @@ void NV_API_CALL nv_acpi_methods_init(NvU32 *handlesPresent)
     int retVal = -1;
 #endif
 
-
     if (!handlesPresent) // Caller passed us invalid pointer.
         return;
 
-
     *handlesPresent = 0;
 
     NV_ACPI_WALK_NAMESPACE(ACPI_TYPE_DEVICE, ACPI_ROOT_OBJECT,
                         ACPI_UINT32_MAX, nv_acpi_find_methods, NULL, NULL);
 
-#if defined(NV_ACPI_BUS_GET_DEVICE_PRESENT)
     if (nvif_handle)
     {
         *handlesPresent = NV_ACPI_NVIF_HANDLE_PRESENT;
+#if defined(NV_ACPI_BUS_GET_DEVICE_PRESENT)
         do
         {
             if (!nvif_parent_gpu_handle) /* unknown error */
@@ -665,15 +663,15 @@ void NV_API_CALL nv_acpi_methods_init(NvU32 *handlesPresent)
                            nodes' structures. So nothing more to be done */
             }
 
-            device->driver_data  = nv_install_notifier(device, nv_acpi_event);
+            device->driver_data  = nv_install_notifier(device->handle, nv_acpi_event);
 
 
             if (!device->driver_data)
                 nvif_parent_gpu_handle = NULL;
 
         } while (0);
-    }
 #endif
+    }
 
     if (wmmx_handle)
         *handlesPresent = *handlesPresent | NV_ACPI_WMMX_HANDLE_PRESENT;
@@ -682,7 +680,6 @@ void NV_API_CALL nv_acpi_methods_init(NvU32 *handlesPresent)
     if (mxms_handle)
         *handlesPresent = *handlesPresent | NV_ACPI_MXMS_HANDLE_PRESENT;
 
-#if defined(NV_ACPI_BUS_GET_DEVICE_PRESENT)
     if (psr_handle)
     {
         // Since _PSR is not a per-GPU construct we only need to register a
@@ -690,15 +687,9 @@ void NV_API_CALL nv_acpi_methods_init(NvU32 *handlesPresent)
         // devices
         if (psr_nv_acpi_object == NULL)
         {
-            retVal = acpi_bus_get_device(psr_device_handle, &device);
-
-            if (!(ACPI_FAILURE(retVal) || !device))
-            {
-                psr_nv_acpi_object = nv_install_notifier(device, nv_acpi_powersource_hotplug_event);
-            }
+            psr_nv_acpi_object = nv_install_notifier(psr_device_handle, nv_acpi_powersource_hotplug_event);
         }
     }
-#endif
 
     return;
 }
-- 
2.20.1

